// Here is a really simple greylist implementation.
// The goal of a greylist is to temporarily reject a transaction from a new sender.
// If the mail is legitimate, the originating server will (most of the time) try again after a delay.
import "csv_greylist" as csv;

// You could also use the mysql service defined in 'mysql_greylist.vsl'.
// import "mysql_greylist" as mysql;

#{
    mail: [

        // you could also use mysql::mysql_greylist.
        rule "greylist" || {
            let sender = mail_from();

            // If the sender is part of the domains of the server,
            // then it is useless to greylist it. (do not forget to
            // check for open relays though)
            //
            // if the sender is not recognized in our database,
            // we deny the transaction and write the sender into
            // the database.
            if !in_domain(mail_from()) && csv::csv_greylist.get(sender) == [] {
                csv::csv_greylist.set([ sender ]);
                deny(code_greylist)
            } else {
                // the user is known by the server, the transaction
                // can proceed.
                accept()
            }
        },
    ],
}
